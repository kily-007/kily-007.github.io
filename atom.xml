<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kily-007.github.io/</id>
    <title>kily007</title>
    <updated>2020-06-04T16:04:48.892Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kily-007.github.io/"/>
    <link rel="self" href="https://kily-007.github.io/atom.xml"/>
    <subtitle>啦啦啦，我是卖报的小行家...</subtitle>
    <logo>https://kily-007.github.io/images/avatar.png</logo>
    <icon>https://kily-007.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, kily007</rights>
    <entry>
        <title type="html"><![CDATA[Gridea添加百度统计]]></title>
        <id>https://kily-007.github.io/post/gridea-tian-jia-bai-du-tong-ji/</id>
        <link href="https://kily-007.github.io/post/gridea-tian-jia-bai-du-tong-ji/">
        </link>
        <updated>2020-05-31T05:56:16.000Z</updated>
        <summary type="html"><![CDATA[<p>Gridea默认仅支持谷歌统计，而国内访问谷歌网站受限，在此根据github上的资源，整合了添加百度统计的功能。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Gridea默认仅支持谷歌统计，而国内访问谷歌网站受限，在此根据github上的资源，整合了添加百度统计的功能。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[序贯相似性检测算法(SSDA)]]></title>
        <id>https://kily-007.github.io/post/序贯相似性检测算法-SSDA/</id>
        <link href="https://kily-007.github.io/post/序贯相似性检测算法-SSDA/">
        </link>
        <updated>2019-12-16T07:46:00.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="序贯相似性检测算法ssda">序贯相似性检测算法（SSDA）</h2>
<p>传统的模板匹配算法的基本搜索策略是遍历性的，为了找到最优匹配点，传统方法均必须在搜索区域内的每一个像素点上进行区域相关匹配计算，图像相关匹配的数据量和计算量很大，匹配速度较慢，序贯相似性检测算法（SSDA）是针对传统模板匹配算法提出的一种高效的图像匹配算法。具体算法是先初步搜索，再精搜索，搜索的范围一步一步减小。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="序贯相似性检测算法ssda">序贯相似性检测算法（SSDA）</h2>
<p>传统的模板匹配算法的基本搜索策略是遍历性的，为了找到最优匹配点，传统方法均必须在搜索区域内的每一个像素点上进行区域相关匹配计算，图像相关匹配的数据量和计算量很大，匹配速度较慢，序贯相似性检测算法（SSDA）是针对传统模板匹配算法提出的一种高效的图像匹配算法。具体算法是先初步搜索，再精搜索，搜索的范围一步一步减小。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[kafka自定义序列化类]]></title>
        <id>https://kily-007.github.io/post/kafka自定义序列化类/</id>
        <link href="https://kily-007.github.io/post/kafka自定义序列化类/">
        </link>
        <updated>2019-12-05T01:36:20.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="kafka版本">kafka版本</h2>
<p>zookeeper使用版本：zookeeper-3.4.14.tar.gz</p>
<p>kafka使用版本：kafka_2.12-2.0.0.tgz</p>
<p>pom.xml依赖：</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="kafka版本">kafka版本</h2>
<p>zookeeper使用版本：zookeeper-3.4.14.tar.gz</p>
<p>kafka使用版本：kafka_2.12-2.0.0.tgz</p>
<p>pom.xml依赖：</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[springboot数据库访问]]></title>
        <id>https://kily-007.github.io/post/springboot数据库访问/</id>
        <link href="https://kily-007.github.io/post/springboot数据库访问/">
        </link>
        <updated>2019-12-03T09:11:39.000Z</updated>
        <summary type="html"><![CDATA[<p>使用jpa(JpaRepository)方式连接访问数据库</p>
]]></summary>
        <content type="html"><![CDATA[<p>使用jpa(JpaRepository)方式连接访问数据库</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[springboot之JpaRepository查询列名错误]]></title>
        <id>https://kily-007.github.io/post/springboot之JpaRepository查询列名错误/</id>
        <link href="https://kily-007.github.io/post/springboot之JpaRepository查询列名错误/">
        </link>
        <updated>2019-11-25T11:38:02.000Z</updated>
        <summary type="html"><![CDATA[<p>记录一次报错。<br>
java.sql.SQLSyntaxErrorException: Unknown column 'subwaycoun0_.pass_num1' in 'field list'<br>
at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120) ~[mysql-connector-java-8.0.18.jar:8.0.18]<br>
at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) ~[mysql-connector-java-8.0.18.jar:8.0.18]</p>
]]></summary>
        <content type="html"><![CDATA[<p>记录一次报错。<br>
java.sql.SQLSyntaxErrorException: Unknown column 'subwaycoun0_.pass_num1' in 'field list'<br>
at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120) ~[mysql-connector-java-8.0.18.jar:8.0.18]<br>
at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) ~[mysql-connector-java-8.0.18.jar:8.0.18]</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端框架layui]]></title>
        <id>https://kily-007.github.io/post/前端框架layui/</id>
        <link href="https://kily-007.github.io/post/前端框架layui/">
        </link>
        <updated>2019-11-10T10:57:54.000Z</updated>
        <summary type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://blog-1300147267.cos.ap-shanghai.myqcloud.com/img/layui1.png" alt="" loading="lazy"></figure>
]]></summary>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://blog-1300147267.cos.ap-shanghai.myqcloud.com/img/layui1.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[springboot]]></title>
        <id>https://kily-007.github.io/post/springboot/</id>
        <link href="https://kily-007.github.io/post/springboot/">
        </link>
        <updated>2019-11-02T07:28:30.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="springboot项目结构">springboot项目结构：</h1>
<pre><code>controller:控制器层，导入service层，调用service方法；通过接受前端传过来的参数进行业务操作，再返回一个指定的路径或数据表
bean/entity/model:实体类，映射数据库中的字段
mapper/dao:放的是对数据库的操作，如CRUD
service:业务层，存放业务逻辑处理；不直接对数据库进行操作，有接口和接口实现类；提供controller层调用的方法
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h1 id="springboot项目结构">springboot项目结构：</h1>
<pre><code>controller:控制器层，导入service层，调用service方法；通过接受前端传过来的参数进行业务操作，再返回一个指定的路径或数据表
bean/entity/model:实体类，映射数据库中的字段
mapper/dao:放的是对数据库的操作，如CRUD
service:业务层，存放业务逻辑处理；不直接对数据库进行操作，有接口和接口实现类；提供controller层调用的方法
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[windows远程连接桌面linux]]></title>
        <id>https://kily-007.github.io/post/windows远程连接桌面linux/</id>
        <link href="https://kily-007.github.io/post/windows远程连接桌面linux/">
        </link>
        <updated>2019-10-16T07:15:25.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="准备工作">准备工作</h1>
<p>1）centos桌面已安装</p>
<p>2）windows系统</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="准备工作">准备工作</h1>
<p>1）centos桌面已安装</p>
<p>2）windows系统</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[笔记-MySql主从复制原理]]></title>
        <id>https://kily-007.github.io/post/笔记-MySql主从复制原理/</id>
        <link href="https://kily-007.github.io/post/笔记-MySql主从复制原理/">
        </link>
        <updated>2019-09-17T07:19:22.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="mysql主从复制的作用">MySql主从复制的作用</h1>
<ul>
<li>读写分离</li>
<li>备份</li>
<li>高可用</li>
<li>架构扩展</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<h1 id="mysql主从复制的作用">MySql主从复制的作用</h1>
<ul>
<li>读写分离</li>
<li>备份</li>
<li>高可用</li>
<li>架构扩展</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[笔记-java创建线程的几种方式]]></title>
        <id>https://kily-007.github.io/post/笔记-java创建线程的几种方式/</id>
        <link href="https://kily-007.github.io/post/笔记-java创建线程的几种方式/">
        </link>
        <updated>2019-09-16T02:16:37.000Z</updated>
        <summary type="html"><![CDATA[<p>Java使用Thread类代表线程，所有的线程对象都必须是Thread类或其子类的实例。Java可以用四种方式来创建线程，如下：</p>
<p>1）继承Thread类创建线程；</p>
<p>2）实现Runnable接口创建线程；</p>
<p>3）实现Callable接口通过FutureTask包装器来创建Thread线程；</p>
<p>4）线程池</p>
]]></summary>
        <content type="html"><![CDATA[<p>Java使用Thread类代表线程，所有的线程对象都必须是Thread类或其子类的实例。Java可以用四种方式来创建线程，如下：</p>
<p>1）继承Thread类创建线程；</p>
<p>2）实现Runnable接口创建线程；</p>
<p>3）实现Callable接口通过FutureTask包装器来创建Thread线程；</p>
<p>4）线程池</p>
]]></content>
    </entry>
</feed>